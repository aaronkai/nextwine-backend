input WineRelateToManyInput {
  create: [WineCreateInput]
  connect: [WineWhereUniqueInput]
  disconnect: [WineWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type User {
  id: ID!
  name: String
  email: String
  password_is_set: Boolean
  wines(where: WineWhereInput, search: String, sortBy: [SortWinesBy!], orderBy: String, first: Int, skip: Int): [Wine!]!
  _winesMeta(where: WineWhereInput, search: String, sortBy: [SortWinesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean

  """ condition must be true for all nodes """
  wines_every: WineWhereInput

  """ condition must be true for at least 1 node """
  wines_some: WineWhereInput

  """ condition must be false for all nodes """
  wines_none: WineWhereInput
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  wines_ASC
  wines_DESC
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  wines: WineRelateToManyInput
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  wines: WineRelateToManyInput
}

input UsersCreateInput {
  data: UserCreateInput
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

input WineImageRelateToOneInput {
  create: WineImageCreateInput
  connect: WineImageWhereUniqueInput
  disconnect: WineImageWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type Wine {
  id: ID!
  name: String
  region: String
  notes: String
  vintner: String
  price: Int
  vintage: Int
  rating: Int
  hue: String
  carbonation: String
  consumptionDate: String
  user: User
  image: WineImage
}

input WineWhereInput {
  AND: [WineWhereInput]
  OR: [WineWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  region: String
  region_not: String
  region_contains: String
  region_not_contains: String
  region_starts_with: String
  region_not_starts_with: String
  region_ends_with: String
  region_not_ends_with: String
  region_i: String
  region_not_i: String
  region_contains_i: String
  region_not_contains_i: String
  region_starts_with_i: String
  region_not_starts_with_i: String
  region_ends_with_i: String
  region_not_ends_with_i: String
  region_in: [String]
  region_not_in: [String]
  notes: String
  notes_not: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  notes_i: String
  notes_not_i: String
  notes_contains_i: String
  notes_not_contains_i: String
  notes_starts_with_i: String
  notes_not_starts_with_i: String
  notes_ends_with_i: String
  notes_not_ends_with_i: String
  notes_in: [String]
  notes_not_in: [String]
  vintner: String
  vintner_not: String
  vintner_contains: String
  vintner_not_contains: String
  vintner_starts_with: String
  vintner_not_starts_with: String
  vintner_ends_with: String
  vintner_not_ends_with: String
  vintner_i: String
  vintner_not_i: String
  vintner_contains_i: String
  vintner_not_contains_i: String
  vintner_starts_with_i: String
  vintner_not_starts_with_i: String
  vintner_ends_with_i: String
  vintner_not_ends_with_i: String
  vintner_in: [String]
  vintner_not_in: [String]
  price: Int
  price_not: Int
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  price_in: [Int]
  price_not_in: [Int]
  vintage: Int
  vintage_not: Int
  vintage_lt: Int
  vintage_lte: Int
  vintage_gt: Int
  vintage_gte: Int
  vintage_in: [Int]
  vintage_not_in: [Int]
  rating: Int
  rating_not: Int
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  rating_in: [Int]
  rating_not_in: [Int]
  hue: String
  hue_not: String
  hue_in: [String]
  hue_not_in: [String]
  carbonation: String
  carbonation_not: String
  carbonation_in: [String]
  carbonation_not_in: [String]
  consumptionDate: String
  consumptionDate_not: String
  consumptionDate_lt: String
  consumptionDate_lte: String
  consumptionDate_gt: String
  consumptionDate_gte: String
  consumptionDate_in: [String]
  consumptionDate_not_in: [String]
  user: UserWhereInput
  user_is_null: Boolean
  image: WineImageWhereInput
  image_is_null: Boolean
}

input WineWhereUniqueInput {
  id: ID!
}

enum SortWinesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  region_ASC
  region_DESC
  notes_ASC
  notes_DESC
  vintner_ASC
  vintner_DESC
  price_ASC
  price_DESC
  vintage_ASC
  vintage_DESC
  rating_ASC
  rating_DESC
  hue_ASC
  hue_DESC
  carbonation_ASC
  carbonation_DESC
  consumptionDate_ASC
  consumptionDate_DESC
  user_ASC
  user_DESC
  image_ASC
  image_DESC
}

input WineUpdateInput {
  name: String
  region: String
  notes: String
  vintner: String
  price: Int
  vintage: Int
  rating: Int
  hue: String
  carbonation: String
  consumptionDate: String
  user: UserRelateToOneInput
  image: WineImageRelateToOneInput
}

input WinesUpdateInput {
  id: ID!
  data: WineUpdateInput
}

input WineCreateInput {
  name: String
  region: String
  notes: String
  vintner: String
  price: Int
  vintage: Int
  rating: Int
  hue: String
  carbonation: String
  consumptionDate: String
  user: UserRelateToOneInput
  image: WineImageRelateToOneInput
}

input WinesCreateInput {
  data: WineCreateInput
}

type CloudinaryImage_File {
  id: ID
  path: String
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.` 
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input WineRelateToOneInput {
  create: WineCreateInput
  connect: WineWhereUniqueInput
  disconnect: WineWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type WineImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  wine: Wine
}

input WineImageWhereInput {
  AND: [WineImageWhereInput]
  OR: [WineImageWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  image: String
  image_not: String
  image_in: [String]
  image_not_in: [String]
  altText: String
  altText_not: String
  altText_contains: String
  altText_not_contains: String
  altText_starts_with: String
  altText_not_starts_with: String
  altText_ends_with: String
  altText_not_ends_with: String
  altText_i: String
  altText_not_i: String
  altText_contains_i: String
  altText_not_contains_i: String
  altText_starts_with_i: String
  altText_not_starts_with_i: String
  altText_ends_with_i: String
  altText_not_ends_with_i: String
  altText_in: [String]
  altText_not_in: [String]
  wine: WineWhereInput
  wine_is_null: Boolean
}

input WineImageWhereUniqueInput {
  id: ID!
}

enum SortWineImagesBy {
  id_ASC
  id_DESC
  altText_ASC
  altText_DESC
  wine_ASC
  wine_DESC
}

input WineImageUpdateInput {
  image: Upload
  altText: String
  wine: WineRelateToOneInput
}

input WineImagesUpdateInput {
  id: ID!
  data: WineImageUpdateInput
}

input WineImageCreateInput {
  image: Upload
  altText: String
  wine: WineRelateToOneInput
}

input WineImagesCreateInput {
  data: WineImageCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type _ListAccess {
  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'create' operations.
  NOTE: 'create' can only return a Boolean.
  It is not possible to specify a declarative Where clause for this
  operation
  """
  create: Boolean

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'read' operations.
  """
  read: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'update' operations.
  """
  update: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'delete' operations.
  """
  delete: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'auth' operations.
  """
  auth: JSON
}

type _ListQueries {
  """Single-item query name"""
  item: String

  """All-items query name"""
  list: String

  """List metadata query name"""
  meta: String
}

type _ListMutations {
  """Create mutation name"""
  create: String

  """Create many mutation name"""
  createMany: String

  """Update mutation name"""
  update: String

  """Update many mutation name"""
  updateMany: String

  """Delete mutation name"""
  delete: String

  """Delete many mutation name"""
  deleteMany: String
}

type _ListInputTypes {
  """Input type for matching multiple items"""
  whereInput: String

  """Input type for matching a unique item"""
  whereUniqueInput: String

  """Create mutation input type name"""
  createInput: String

  """Create many mutation input type name"""
  createManyInput: String

  """Update mutation name input"""
  updateInput: String

  """Update many mutation name input"""
  updateManyInput: String
}

type _ListSchemaFields {
  """The path of the field in its list"""
  path: String

  """The name of the field in its list"""
  name: String @deprecated(reason: "Use `path` instead")

  """The field type (ie, Checkbox, Text, etc)"""
  type: String
}

type _ListSchemaRelatedFields {
  """The typename as used in GraphQL queries"""
  type: String

  """A list of GraphQL field names"""
  fields: [String]
}

type _ListSchema {
  """The typename as used in GraphQL queries"""
  type: String

  """
  Top level GraphQL query names which either return this type, or
  provide aggregate information about this type
  """
  queries: _ListQueries

  """Top-level GraphQL mutation names"""
  mutations: _ListMutations

  """Top-level GraphQL input types"""
  inputTypes: _ListInputTypes

  """Information about fields defined on this list"""
  fields(where: _ListSchemaFieldsInput): [_ListSchemaFields]

  """
  Information about fields on other types which return this type, or
  provide aggregate information about this type
  """
  relatedFields: [_ListSchemaRelatedFields]
}

type _ListMeta {
  """The Keystone list key"""
  key: String

  """The Keystone List name"""
  name: String @deprecated(reason: "Use `key` instead")

  """The list's user-facing description"""
  description: String

  """The list's display name in the Admin UI"""
  label: String

  """The list's singular display name"""
  singular: String

  """The list's plural display name"""
  plural: String

  """The list's data path"""
  path: String

  """Access control configuration for the currently authenticated request"""
  access: _ListAccess

  """Information on the generated GraphQL schema"""
  schema: _ListSchema
}

type _QueryMeta {
  count: Int
}

input _ksListsMetaInput {
  key: String

  """Whether this is an auxiliary helper list"""
  auxiliary: Boolean
}

input _ListSchemaFieldsInput {
  type: String
}

type Mutation {
  """ Create a single User item. """
  createUser(data: UserCreateInput): User

  """ Create multiple User items. """
  createUsers(data: [UsersCreateInput]): [User]

  """ Update a single User item by ID. """
  updateUser(id: ID!, data: UserUpdateInput): User

  """ Update multiple User items by ID. """
  updateUsers(data: [UsersUpdateInput]): [User]

  """ Delete a single User item by ID. """
  deleteUser(id: ID!): User

  """ Delete multiple User items by ID. """
  deleteUsers(ids: [ID!]): [User]

  """ Create a single Wine item. """
  createWine(data: WineCreateInput): Wine

  """ Create multiple Wine items. """
  createWines(data: [WinesCreateInput]): [Wine]

  """ Update a single Wine item by ID. """
  updateWine(id: ID!, data: WineUpdateInput): Wine

  """ Update multiple Wine items by ID. """
  updateWines(data: [WinesUpdateInput]): [Wine]

  """ Delete a single Wine item by ID. """
  deleteWine(id: ID!): Wine

  """ Delete multiple Wine items by ID. """
  deleteWines(ids: [ID!]): [Wine]

  """ Create a single WineImage item. """
  createWineImage(data: WineImageCreateInput): WineImage

  """ Create multiple WineImage items. """
  createWineImages(data: [WineImagesCreateInput]): [WineImage]

  """ Update a single WineImage item by ID. """
  updateWineImage(id: ID!, data: WineImageUpdateInput): WineImage

  """ Update multiple WineImage items by ID. """
  updateWineImages(data: [WineImagesUpdateInput]): [WineImage]

  """ Delete a single WineImage item by ID. """
  deleteWineImage(id: ID!): WineImage

  """ Delete multiple WineImage items by ID. """
  deleteWineImages(ids: [ID!]): [WineImage]
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult!
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  """ Search for all User items which match the where clause. """
  allUsers(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): [User]

  """ Search for the User item with the matching ID. """
  User(where: UserWhereUniqueInput!): User

  """ Perform a meta-query on all User items which match the where clause. """
  _allUsersMeta(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the User list. """
  _UsersMeta: _ListMeta

  """ Search for all Wine items which match the where clause. """
  allWines(where: WineWhereInput, search: String, sortBy: [SortWinesBy!], orderBy: String, first: Int, skip: Int): [Wine]

  """ Search for the Wine item with the matching ID. """
  Wine(where: WineWhereUniqueInput!): Wine

  """ Perform a meta-query on all Wine items which match the where clause. """
  _allWinesMeta(where: WineWhereInput, search: String, sortBy: [SortWinesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Wine list. """
  _WinesMeta: _ListMeta

  """ Search for all WineImage items which match the where clause. """
  allWineImages(where: WineImageWhereInput, search: String, sortBy: [SortWineImagesBy!], orderBy: String, first: Int, skip: Int): [WineImage]

  """ Search for the WineImage item with the matching ID. """
  WineImage(where: WineImageWhereUniqueInput!): WineImage

  """ Perform a meta-query on all WineImage items which match the where clause. 
  """
  _allWineImagesMeta(where: WineImageWhereInput, search: String, sortBy: [SortWineImagesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the WineImage list. """
  _WineImagesMeta: _ListMeta

  """ Retrieve the meta-data for all lists. """
  _ksListsMeta(where: _ksListsMetaInput): [_ListMeta]
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
